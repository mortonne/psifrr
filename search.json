[{"path":"https://mortonne.github.io/psifrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neal Morton. Author, maintainer.","code":""},{"path":"https://mortonne.github.io/psifrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neal W Morton (2020). Psifr: Analysis visualization free recall data. Journal Open Source Software, 5(54), 2669. URL https://doi.org/10.21105/joss.02669.","code":"@Article{,   year = {2020},   title = {Psifr: Analysis and visualization of free recall data},   author = {Neal W Morton},   journal = {Journal of Open Source Software},   doi = {10.21105/joss.02669},   pages = {2669},   number = {54},   volume = {5}, }"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"psifrr-","dir":"","previous_headings":"","what":"Analysis and visualization of free recall data","title":"Analysis and visualization of free recall data","text":"Analysis visualization free recall data. psifrr relies Psifr Python package, called R using reticulate package.","code":""},{"path":"https://mortonne.github.io/psifrr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis and visualization of free recall data","text":"First, install remotes: Next, install psifrr :","code":"install.packages(\"remotes\") remotes::install_github(\"mortonne/psifrr\")"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"working-with-free-recall-data","dir":"","previous_headings":"","what":"Working with free recall data","title":"Analysis and visualization of free recall data","text":"load sample dataset Psifr format: analyze dataset, need first score matching study items recalled items. See Scoring data details. can use filter_data select one list sample results look like: See Managing data full list functions operate free recall data.","code":"library(psifrr) raw <- sample_data(\"Morton2013\") head(raw) #>   subject list position trial_type       item item_number session list_type #> 1       1    1        1      study      TOWEL         743       1      pure #> 2       1    1        2      study      LADLE         631       1      pure #> 3       1    1        3      study    THERMOS         735       1      pure #> 4       1    1        4      study       LEGO         637       1      pure #> 5       1    1        5      study   BACKPACK         521       1      pure #> 6       1    1        6      study JACKHAMMER         621       1      pure #>   category response response_time list_category #> 1      obj        3         1.517           obj #> 2      obj        3         1.404           obj #> 3      obj        3         0.911           obj #> 4      obj        3         0.883           obj #> 5      obj        3         0.819           obj #> 6      obj        1         1.212           obj data <- merge_free_recall(raw, study_keys = list(\"category\")) filter_data(data, subjects = 1, lists = 1) #>    subject list          item input output study recall repeat intrusion #> 0        1    1         TOWEL     1     13  TRUE   TRUE      0     FALSE #> 1        1    1         LADLE     2    NaN  TRUE  FALSE      0     FALSE #> 2        1    1       THERMOS     3    NaN  TRUE  FALSE      0     FALSE #> 3        1    1          LEGO     4     18  TRUE   TRUE      0     FALSE #> 4        1    1      BACKPACK     5     10  TRUE   TRUE      0     FALSE #> 5        1    1    JACKHAMMER     6      7  TRUE   TRUE      0     FALSE #> 6        1    1       LANTERN     7    NaN  TRUE  FALSE      0     FALSE #> 7        1    1      DOORKNOB     8     11  TRUE   TRUE      0     FALSE #> 8        1    1        SHOVEL     9      9  TRUE   TRUE      0     FALSE #> 9        1    1        SHOVEL     9     19 FALSE   TRUE      1     FALSE #> 10       1    1     WATER GUN    10    NaN  TRUE  FALSE      0     FALSE #> 11       1    1 INK CARTRIDGE    11    NaN  TRUE  FALSE      0     FALSE #> 12       1    1         PHONE    12     16  TRUE   TRUE      0     FALSE #> 13       1    1    PAPER CLIP    13     17  TRUE   TRUE      0     FALSE #> 14       1    1     MOUSETRAP    14     12  TRUE   TRUE      0     FALSE #> 15       1    1       SPEAKER    15    NaN  TRUE  FALSE      0     FALSE #> 16       1    1      CAR SEAT    16      5  TRUE   TRUE      0     FALSE #> 17       1    1       BAYONET    17      3  TRUE   TRUE      0     FALSE #> 18       1    1        MIRROR    18     15  TRUE   TRUE      0     FALSE #> 19       1    1         STONE    19      8  TRUE   TRUE      0     FALSE #> 20       1    1         WATCH    20      4  TRUE   TRUE      0     FALSE #> 21       1    1          PILL    21      6  TRUE   TRUE      0     FALSE #> 22       1    1     SMART CAR    22      2  TRUE   TRUE      0     FALSE #> 23       1    1        REMOTE    23    NaN  TRUE  FALSE      0     FALSE #> 24       1    1         CHAIN    24      1  TRUE   TRUE      0     FALSE #> 25       1    1         CHAIN    24     14 FALSE   TRUE      1     FALSE #>    category prior_list prior_input #> 0       obj        NaN         NaN #> 1       obj        NaN         NaN #> 2       obj        NaN         NaN #> 3       obj        NaN         NaN #> 4       obj        NaN         NaN #> 5       obj        NaN         NaN #> 6       obj        NaN         NaN #> 7       obj        NaN         NaN #> 8       obj        NaN         NaN #> 9       obj        NaN         NaN #> 10      obj        NaN         NaN #> 11      obj        NaN         NaN #> 12      obj        NaN         NaN #> 13      obj        NaN         NaN #> 14      obj        NaN         NaN #> 15      obj        NaN         NaN #> 16      obj        NaN         NaN #> 17      obj        NaN         NaN #> 18      obj        NaN         NaN #> 19      obj        NaN         NaN #> 20      obj        NaN         NaN #> 21      obj        NaN         NaN #> 22      obj        NaN         NaN #> 23      obj        NaN         NaN #> 24      obj        NaN         NaN #> 25      obj        NaN         NaN"},{"path":[]},{"path":"https://mortonne.github.io/psifrr/index.html","id":"serial-position-curve","dir":"","previous_headings":"Recall performance","what":"Serial position curve","title":"Analysis and visualization of free recall data","text":"can calculate average recall serial position using spc. Next, can calculate statistics serial position using boot_ci. ’ll take recall statistic, group input position, calculate mean 95% bootstrap confidence interval position. can plot serial position curve confidence band using ggplot2.  calculate serial position curve multiple conditions, can use group_by. , group stimulus category. can split category plotting.","code":"recall <- spc(data) head(recall) #>   subject input    recall #> 1       1     1 0.5416667 #> 2       1     2 0.4583333 #> 3       1     3 0.6250000 #> 4       1     4 0.3333333 #> 5       1     5 0.4375000 #> 6       1     6 0.4791667 library(dplyr, warn.conflicts = FALSE) library(magrittr) stats <- recall %>%   group_by(input) %>%    summarise(boot_ci(recall), .groups = \"drop\") head(stats) #> # A tibble: 6 × 4 #>   input  mean lower upper #>   <dbl> <dbl> <dbl> <dbl> #> 1     1 0.565 0.518 0.611 #> 2     2 0.505 0.457 0.551 #> 3     3 0.479 0.436 0.519 #> 4     4 0.443 0.410 0.478 #> 5     5 0.458 0.422 0.498 #> 6     6 0.449 0.415 0.480 library(ggplot2) ggplot(stats, aes(x = input)) +   geom_line(color = \"blue\", aes(y = mean)) +   geom_ribbon(alpha = 0.1, fill = \"blue\", aes(ymin = lower, ymax = upper)) +   ylim(0, 1) +   labs(x = \"Serial position\", y = \"Recall probability\") +   theme(aspect.ratio = 1) data$category <- as.character(data$category) stats <- data %>%    group_by(category) %>%    summarise(spc(across()), .groups = \"drop\") %>%   group_by(category, input) %>%    summarise(boot_ci(recall), .groups = \"drop\") ggplot(stats, aes(x = input)) +   geom_line(color = \"blue\", aes(y = mean)) +   geom_ribbon(alpha = 0.1, fill = \"blue\", aes(ymin = lower, ymax = upper)) +   ylim(0, 1) +   labs(x = \"Serial position\", y = \"Recall probability\") +   facet_grid(cols = vars(category)) +   theme(aspect.ratio = 1)"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"probability-of-nth-recall","dir":"","previous_headings":"Recall performance","what":"Probability of Nth recall","title":"Analysis and visualization of free recall data","text":"can also split recalls, test example likely participants initiate recall last item list, using pnr. gives us probability recall conditional output position (output) serial input position (input).","code":"nth_recall <- pnr(data) head(nth_recall) #>   subject output input       prob actual possible #> 1       1      1     1 0.00000000      0       48 #> 2       1      1     2 0.02083333      1       48 #> 3       1      1     3 0.00000000      0       48 #> 4       1      1     4 0.00000000      0       48 #> 5       1      1     5 0.00000000      0       48 #> 6       1      1     6 0.00000000      0       48"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"prior-list-intrusions","dir":"","previous_headings":"Recall performance","what":"Prior-list intrusions","title":"Analysis and visualization of free recall data","text":"Participants sometimes accidentally recall items prior lists; recalls known prior-list intrusions (PLIs). better understand prior-list intrusions happening, can look many lists back items originally presented using pli_list_lag. First, need choose maximum list lag consider. determines lists included analysis. example, maximum lag 3, first 3 lists excluded analysis. ensures included list can potentially intrusions possible list lag. analysis returns raw count intrusions lag (count), count divided number included lists (per_list), probability given intrusion coming given lag (prob).","code":"pli <- pli_list_lag(data, max_lag = 3) head(pli) #>   subject list_lag count   per_list       prob #> 1       1        1     7 0.15555556 0.25925926 #> 2       1        2     5 0.11111111 0.18518519 #> 3       1        3     0 0.00000000 0.00000000 #> 4       2        1     9 0.20000000 0.19148936 #> 5       2        2     2 0.04444444 0.04255319 #> 6       2        3     1 0.02222222 0.02127660"},{"path":[]},{"path":"https://mortonne.github.io/psifrr/index.html","id":"lag-conditional-response-probability","dir":"","previous_headings":"Temporal clustering","what":"Lag conditional response probability","title":"Analysis and visualization of free recall data","text":"CRP analyses, transition probabilities calculated conditional given transition available. example, six-item list, items 6, 1, 4 recalled, possible items recalled next 2, 3, 5; therefore, possible lags point recall sequence -2, -1, +1. number actual transitions observed lag divided number times lag possible, obtain CRP lag. results show count times given transition actually happened observed recall sequences (actual) number times transition occurred (possible). Finally, prob column gives estimated probability given transition occurring, calculated dividing actual count possible count.","code":"crp <- lag_crp(data) head(crp) #>   subject lag       prob actual possible #> 1       1 -23 0.02083333      1       48 #> 2       1 -22 0.03571429      3       84 #> 3       1 -21 0.02631579      3      114 #> 4       1 -20 0.02400000      3      125 #> 5       1 -19 0.01438849      2      139 #> 6       1 -18 0.01219512      2      164"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"compound-lag-conditional-response-probability","dir":"","previous_headings":"Temporal clustering","what":"Compound lag conditional response probability","title":"Analysis and visualization of free recall data","text":"compound lag-CRP developed measure temporal clustering changes result prior clustering recall. found evidence temporal clustering greater immediately transitions short lags compared long lags. lag_crp_compound analysis calculates conditional response probability lag, additional condition lag previous transition. results show conditional response probabilities standard lag-CRP analysis, two lag columns: previous (lag prior transition) current (lag current transition).","code":"compound_crp <- lag_crp_compound(data) head(compound_crp) #>   subject previous current prob actual possible #> 1       1      -23     -23  NaN      0        0 #> 2       1      -23     -22  NaN      0        0 #> 3       1      -23     -21  NaN      0        0 #> 4       1      -23     -20  NaN      0        0 #> 5       1      -23     -19  NaN      0        0 #> 6       1      -23     -18  NaN      0        0"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"lag-rank","dir":"","previous_headings":"Temporal clustering","what":"Lag rank","title":"Analysis and visualization of free recall data","text":"can summarize tendency group together nearby items running lag rank analysis using lag_rank. recall, determines absolute lag remaining items available recall calculates percentile rank. rank actual transition made taken, scaled vary 0 (furthest item chosen) 1 (nearest item chosen). Chance clustering 0.5; clustering value evidence temporal contiguity effect.","code":"ranks <- lag_rank(data) head(ranks) #>   subject      rank #> 1       1 0.6109533 #> 2       2 0.6356764 #> 3       3 0.6126071 #> 4       4 0.6670897 #> 5       5 0.6439234 #> 6       6 0.6484440"},{"path":[]},{"path":"https://mortonne.github.io/psifrr/index.html","id":"category-conditional-response-probability","dir":"","previous_headings":"Category clustering","what":"Category conditional response probability","title":"Analysis and visualization of free recall data","text":"multiple categories conditions trials list, can test whether participants tend successively recall items category. category-CRP, calculated using category_crp, estimates probability successively recalling two items category.","code":"cat_crp <- category_crp(data, \"category\") head(cat_crp) #>   subject      prob actual possible #> 1       1 0.8011472    419      523 #> 2       2 0.7334559    399      544 #> 3       3 0.7631579    377      494 #> 4       4 0.8148820    449      551 #> 5       5 0.8772727    579      660 #> 6       6 0.8096154    421      520"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"category-clustering-measures","dir":"","previous_headings":"Category clustering","what":"Category clustering measures","title":"Analysis and visualization of free recall data","text":"number measures developed measure category clustering relative expected due chance, certain assumptions. Two measures list-based clustering (LBC) adjusted ratio clustering (ARC). measures can calculated using category_clustering function. measures defined positive values indicate -chance clustering. ARC scores maximum 1, upper bound LBC scores depends number categories number items per category study list.","code":"clust = category_clustering(data, \"category\") head(clust) #>   subject      lbc       arc #> 1       1 2.286232 0.6145451 #> 2       2 1.846014 0.4078391 #> 3       3 2.102355 0.6273712 #> 4       4 2.778080 0.6887610 #> 5       5 4.706522 0.8737552 #> 6       6 2.801630 0.7239257"},{"path":[]},{"path":"https://mortonne.github.io/psifrr/index.html","id":"distance-conditional-response-probability","dir":"","previous_headings":"Semantic clustering","what":"Distance conditional response probability","title":"Analysis and visualization of free recall data","text":"Models semantic knowledge allow semantic distance pairs items quantified. model defined stimulus pool, can use distance CRP analysis examine semantic distance affects recall transitions. must first define distances pairs items. , use correlation distances based wiki2USE model. also need column indicating index item distances matrix. use pool_index create new column called item_index index item pool corresponding distances matrix. Finally, must define distance bins. , use 10 bins equally spaced distance percentiles. Note , calculating distance percentiles, use squareform function get non-diagonal entries. can now calculate conditional response probability function distance bin using distance_crp, examine response probability varies semantic distance.","code":"d <- sample_distances(\"Morton2013\") data$item_index <- pool_index(data$item, d$items) percentiles <- pracma::linspace(.01, .99, 10) edges <- quantile(pracma::squareform(d$distances), percentiles) dist_crp <- distance_crp(data, \"item_index\", d$distances, edges) head(dist_crp) #>   subject    center       prob actual possible #> 1       1 0.4675320 0.08545557    151     1767 #> 2       1 0.6177484 0.06791569     87     1281 #> 3       1 0.6736562 0.06250000     65     1040 #> 4       1 0.7110752 0.05183585     48      926 #> 5       1 0.7420689 0.05063291     44      869 #> 6       1 0.7708671 0.02836879     24      846"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"distance-rank","dir":"","previous_headings":"Semantic clustering","what":"Distance rank","title":"Analysis and visualization of free recall data","text":"Similarly lag rank analysis temporal clustering, can summarize distance-based clustering (semantic clustering) single rank measure. distance rank varies 0 (-distant item always recalled) 1 (closest item always recalled), chance clustering corresponding 0.5. Given matrix item distances, can calculate distance rank using distance_rank.","code":"ranks <- distance_rank(data, \"item_index\", d$distances) head(ranks) #>   subject      rank #> 1       1 0.6355710 #> 2       2 0.5714568 #> 3       3 0.6272815 #> 4       4 0.6375957 #> 5       5 0.6461814 #> 6       6 0.6002912"},{"path":"https://mortonne.github.io/psifrr/index.html","id":"distance-rank-shifted","dir":"","previous_headings":"Semantic clustering","what":"Distance rank shifted","title":"Analysis and visualization of free recall data","text":"Like compound lag-CRP, can also examine recalls just-previous one may predict subsequent recalls. examine whether distances relative earlier items predictive next recall, can use shifted distance rank analysis using distance_rank_shifted. , account category structure list, include within-category transitions. distance rank returned shift. -1 shift standard distance rank analysis.","code":"ranks <- distance_rank_shifted(data, \"item_index\", d$distances, 4, test_key = \"category\", test = function(x, y) x == y) head(ranks) #>   subject shift      rank #> 1       1    -4 0.5186171 #> 2       1    -3 0.4921032 #> 3       1    -2 0.5160634 #> 4       1    -1 0.5791984 #> 5       2    -4 0.4639307 #> 6       2    -3 0.4965965"},{"path":"https://mortonne.github.io/psifrr/reference/block_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Create block index — block_index","title":"Create block index — block_index","text":"Get index block list.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/block_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create block index — block_index","text":"","code":"block_index(list_labels)"},{"path":"https://mortonne.github.io/psifrr/reference/block_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create block index — block_index","text":"list_labels Position labels define blocks.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/block_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create block index — block_index","text":"Block index position.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/block_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create block index — block_index","text":"","code":"list_labels <- list(2, 2, 3, 3, 3, 1, 1) block_index(list_labels) #> [1] 1 1 2 2 2 3 3"},{"path":"https://mortonne.github.io/psifrr/reference/boot_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap CI — boot_ci","title":"Bootstrap CI — boot_ci","text":"Mean bootstrap confidence interval.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/boot_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap CI — boot_ci","text":"","code":"boot_ci(stat, ci = 95, R = 1000)"},{"path":"https://mortonne.github.io/psifrr/reference/boot_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap CI — boot_ci","text":"stat Vector observations statistic. ci Confidence interval percentile units. R Number bootstrap iterations use calculating statistics.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/boot_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap CI — boot_ci","text":"Results mean, lower, upper columns indicating mean statistic lower upper bounds CI based bootstrap procedure.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/boot_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap CI — boot_ci","text":"","code":"# Calculate analysis results raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) results <- spc(data)  # Calculate statistics grouped by input (serial) position library(magrittr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union results %>%   group_by(input) %>%   summarise(boot_ci(recall)) #> # A tibble: 24 × 4 #>    input  mean lower upper #>    <dbl> <dbl> <dbl> <dbl> #>  1     1 0.565 0.517 0.613 #>  2     2 0.505 0.454 0.554 #>  3     3 0.479 0.439 0.520 #>  4     4 0.443 0.409 0.479 #>  5     5 0.458 0.420 0.497 #>  6     6 0.449 0.416 0.483 #>  7     7 0.432 0.403 0.464 #>  8     8 0.421 0.387 0.454 #>  9     9 0.444 0.406 0.480 #> 10    10 0.436 0.398 0.473 #> # ℹ 14 more rows"},{"path":"https://mortonne.github.io/psifrr/reference/category_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Category clustering — category_clustering","title":"Category clustering — category_clustering","text":"Measures category clustering recall sequences.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Category clustering — category_clustering","text":"","code":"category_clustering(data, category_key)"},{"path":"https://mortonne.github.io/psifrr/reference/category_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Category clustering — category_clustering","text":"data Merged study recall data. category_key Name column category labels.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Category clustering — category_clustering","text":"Results subject, lbc, arccolumns. Thelbc`` column indicates list-based clustering measure. arc column contains adjusted ratio clustering measure.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_clustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Category clustering — category_clustering","text":"","code":"# Get lists with a mixture of categories raw <- sample_data(\"Morton2013\") mixed <- raw[raw$list_type == \"mixed\", ]  # Calculate category clustering measures data <- merge_free_recall(mixed, list_keys = list(\"category\")) stats <- category_clustering(data, \"category\") head(stats) #>   subject      lbc       arc #> 1       1 3.657971 0.6145451 #> 2       2 2.953623 0.4078391 #> 3       3 3.363768 0.6273712 #> 4       4 4.444928 0.6887610 #> 5       5 7.530435 0.8737552 #> 6       6 4.482609 0.7239257"},{"path":"https://mortonne.github.io/psifrr/reference/category_crp.html","id":null,"dir":"Reference","previous_headings":"","what":"Category conditional response probability — category_crp","title":"Category conditional response probability — category_crp","text":"Response probability within-category transitions, conditional availability.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_crp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Category conditional response probability — category_crp","text":"","code":"category_crp(   data,   category_key,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/category_crp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Category conditional response probability — category_crp","text":"data Merged study recall data. category_key Name column category labels. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_crp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Category conditional response probability — category_crp","text":"Results subject, prob, actual, possible columns. prob column indicates conditional response probability. actual column indicates count transitions actually made given lag. possible column indicates number transitions made, given item availability (previously recalled items excluded).","code":""},{"path":"https://mortonne.github.io/psifrr/reference/category_crp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Category conditional response probability — category_crp","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw, study_keys = list(\"category\")) cat_crp <- category_crp(data, \"category\") head(cat_crp) #>   subject      prob actual possible #> 1       1 0.8011472    419      523 #> 2       2 0.7334559    399      544 #> 3       3 0.7631579    377      494 #> 4       4 0.8148820    449      551 #> 5       5 0.8772727    579      660 #> 6       6 0.8096154    421      520"},{"path":"https://mortonne.github.io/psifrr/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check raw free recall data — check_data","title":"Check raw free recall data — check_data","text":"Run checks raw (unmerged) free recall data.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check raw free recall data — check_data","text":"","code":"check_data(data)"},{"path":"https://mortonne.github.io/psifrr/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check raw free recall data — check_data","text":"data Raw free recall data standard format.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check raw free recall data — check_data","text":"","code":"# Create data with a required column missing raw <- data.frame(   subject = list(1, 1),   list = list(1, 1),   position = list(1, 2),   item = list(\"a\", \"b\") )  # Checking this dataset will display an error # check_data(raw)"},{"path":"https://mortonne.github.io/psifrr/reference/distance_crp.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance conditional response probability — distance_crp","title":"Distance conditional response probability — distance_crp","text":"Response probability function distance measure, conditional item availability.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_crp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance conditional response probability — distance_crp","text":"","code":"distance_crp(   data,   index_key,   distances,   edges,   centers = NULL,   count_unique = FALSE,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/distance_crp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance conditional response probability — distance_crp","text":"data Merged study recall data. index_key Name column containing index item distances matrix. distances Items x items matrix pairwise distances. edges Edges bins apply distances. centers Centers label bin. specified, center point edges used. count_unique TRUE, possible transitions given distance bin count given transition. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_crp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance conditional response probability — distance_crp","text":"Results subject, bin, prob, actual, possible columns. prob column indicates conditional response probability. actual column indicates count transitions actually made given distance bin. possible column indicates number transitions made, given item availability (previously recalled items excluded).","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_crp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance conditional response probability — distance_crp","text":"","code":"# Load data and item-item distances raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) d <- sample_distances(\"Morton2013\")  # Prepare bin definitions percentiles <- pracma::linspace(.01, .99, 10) edges <- quantile(pracma::squareform(d$distances), percentiles)  # Calculate distance CRP data$item_index <- pool_index(data$item, d$items) crp <- distance_crp(data, \"item_index\", d$distances, edges)"},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance rank — distance_rank","title":"Distance rank — distance_rank","text":"Rank transition distances.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance rank — distance_rank","text":"","code":"distance_rank(   data,   index_key,   distances,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance rank — distance_rank","text":"data Merged study recall data. index_key Name column containing index item distances matrix. distances Items x items matrix pairwise distances. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance rank — distance_rank","text":"Results subject rank columns. rank 1 indicates smallest distance transition always made, 0.5 indicates chance clustering, 0 indicates largest distance transition always made.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance rank — distance_rank","text":"","code":"# Load data and item-item distances raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) d <- sample_distances(\"Morton2013\")  # Calculate distance rank data$item_index <- pool_index(data$item, d$items) ranks <- distance_rank(data, \"item_index\", d$distances) head(ranks) #>   subject      rank #> 1       1 0.6355710 #> 2       2 0.5714568 #> 3       3 0.6272815 #> 4       4 0.6375957 #> 5       5 0.6461814 #> 6       6 0.6002912"},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank_shifted.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance rank shifted — distance_rank_shifted","title":"Distance rank shifted — distance_rank_shifted","text":"Rank transition distances, shifted recall lag.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank_shifted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance rank shifted — distance_rank_shifted","text":"","code":"distance_rank_shifted(   data,   index_key,   distances,   max_shift,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank_shifted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance rank shifted — distance_rank_shifted","text":"data Merged study recall data. index_key Name column containing index item distances matrix. distances Items x items matrix pairwise distances. max_shift Maximum number items back rank distances. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank_shifted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance rank shifted — distance_rank_shifted","text":"Results subject, shift, rank columns. rank 1 indicates smallest distance transition always made, 0.5 indicates chance clustering, 0 indicates largest distance transition always made.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/distance_rank_shifted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance rank shifted — distance_rank_shifted","text":"","code":"# Load data and item-item distances raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) d <- sample_distances(\"Morton2013\")  # Calculate distance rank data$item_index <- pool_index(data$item, d$items) ranks <- distance_rank_shifted(data, \"item_index\", d$distances, max_shift = 3) head(ranks) #>   subject shift      rank #> 1       1    -3 0.5234261 #> 2       1    -2 0.5591991 #> 3       1    -1 0.6343924 #> 4       2    -3 0.4759309 #> 5       2    -2 0.5075738 #> 6       2    -1 0.5687566"},{"path":"https://mortonne.github.io/psifrr/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter free recall data — filter_data","title":"Filter free recall data — filter_data","text":"Filter raw scored data get subset trials study/recall pairings.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter free recall data — filter_data","text":"","code":"filter_data(   data,   subjects = NULL,   lists = NULL,   trial_type = NULL,   positions = NULL,   inputs = NULL,   outputs = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter free recall data — filter_data","text":"data Raw merged data filter. subjects Subject subjects include. lists List lists include. trial_type Trial type include. positions Position positions include. inputs Input position positions include. outputs Output position positions include.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter free recall data — filter_data","text":"filtered subset data.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter free recall data — filter_data","text":"","code":"# Filter data to get study events for subject 1 subjects_list <- list(1, 1, 2, 2) study_lists <- list(   list(\"a\", \"b\"), list(\"c\", \"d\"), list(\"e\", \"f\"), list(\"g\", \"h\") ) recall_lists <- list(list(\"b\"), list(\"d\", \"c\"), list(\"f\", \"e\"), list()) raw <- table_from_lists(subjects_list, study_lists, recall_lists) filter_data(raw, subjects = 1, trial_type = \"study\") #>   subject list trial_type position item #> 0       1    1      study        1    a #> 1       1    1      study        2    b #> 3       1    2      study        1    c #> 4       1    2      study        2    d  # Filtered scored data to get subject 2 data <- merge_free_recall(raw) filter_data(data, subjects = 2) #>   subject list item input output study recall repeat intrusion prior_list #> 4       2    1    e     1      2  TRUE   TRUE      0     FALSE        NaN #> 5       2    1    f     2      1  TRUE   TRUE      0     FALSE        NaN #> 6       2    2    g     1    NaN  TRUE  FALSE      0     FALSE        NaN #> 7       2    2    h     2    NaN  TRUE  FALSE      0     FALSE        NaN #>   prior_input #> 4         NaN #> 5         NaN #> 6         NaN #> 7         NaN"},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag conditional response probability — lag_crp","title":"Lag conditional response probability — lag_crp","text":"Probability recalling item function lag previous recall, conditional available recall.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag conditional response probability — lag_crp","text":"","code":"lag_crp(   data,   lag_key = \"input\",   count_unique = FALSE,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag conditional response probability — lag_crp","text":"data Merged study recall data. lag_key Name column use calculating lag recalled items. count_unique TRUE, possible transitions lag incremented per transition. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag conditional response probability — lag_crp","text":"Results subject, lag, prob, actual, possible columns. prob column indicates conditional response probability. actual column indicates count transitions actually made given lag. possible column indicates number transitions made, given item availability (previously recalled items excluded).","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lag conditional response probability — lag_crp","text":"","code":"# All transitions included raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw, study_keys = list(\"category\")) head(lag_crp(data)) #>   subject lag       prob actual possible #> 1       1 -23 0.02083333      1       48 #> 2       1 -22 0.03571429      3       84 #> 3       1 -21 0.02631579      3      114 #> 4       1 -20 0.02400000      3      125 #> 5       1 -19 0.01438849      2      139 #> 6       1 -18 0.01219512      2      164  # Excluding the first three output positions (need to include non-recalled # items specifically so they aren't excluded as possible items to recall) head(lag_crp(data, item_query = \"output > 3 or not recall\")) #>   subject lag       prob actual possible #> 1       1 -23 0.00000000      0        1 #> 2       1 -22 0.20000000      1        5 #> 3       1 -21 0.00000000      0       21 #> 4       1 -20 0.03571429      1       28 #> 5       1 -19 0.02777778      1       36 #> 6       1 -18 0.01694915      1       59  # Including within-category transitions only head(lag_crp(data, test_key = \"category\", test = function(x, y) x == y)) #>   subject lag       prob actual possible #> 1       1 -23 0.04347826      1       23 #> 2       1 -22 0.05128205      2       39 #> 3       1 -21 0.05454545      3       55 #> 4       1 -20 0.05357143      3       56 #> 5       1 -19 0.01315789      1       76 #> 6       1 -18 0.02061856      2       97"},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp_compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound lag conditional response probability — lag_crp_compound","title":"Compound lag conditional response probability — lag_crp_compound","text":"Response probability function lag current prior transitions, conditional item availability.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp_compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound lag conditional response probability — lag_crp_compound","text":"","code":"lag_crp_compound(   data,   lag_key = \"input\",   count_unique = FALSE,   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp_compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound lag conditional response probability — lag_crp_compound","text":"data Merged study recall data. lag_key Name column use calculating lag recalled items. count_unique TRUE, possible transitions lag incremented per transition. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp_compound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound lag conditional response probability — lag_crp_compound","text":"Results subject, previous, current, prob, actual, possible columns. prob column indicates conditional response probability. actual column indicates count transitions actually made given combination previous current lags. possible column indicates number transitions made, given item availability (previously recalled items excluded).","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_crp_compound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound lag conditional response probability — lag_crp_compound","text":"","code":"# Create short example list with three recalls subjects <- list(1) study <- list(list(\"absence\", \"hollow\", \"pupil\", \"fountain\")) recall <- list(list(\"fountain\", \"hollow\", \"absence\")) raw <- table_from_lists(subjects, study, recall) data <- merge_free_recall(raw)  # Display compound CRP for previous lags of -3 and -2 head(lag_crp_compound(data), 14) #>    subject previous current prob actual possible #> 1        1       -3      -3  NaN      0        0 #> 2        1       -3      -2  NaN      0        0 #> 3        1       -3      -1  NaN      0        0 #> 4        1       -3       0  NaN      0        0 #> 5        1       -3       1  NaN      0        0 #> 6        1       -3       2  NaN      0        0 #> 7        1       -3       3  NaN      0        0 #> 8        1       -2      -3  NaN      0        0 #> 9        1       -2      -2  NaN      0        0 #> 10       1       -2      -1    1      1        1 #> 11       1       -2       0  NaN      0        0 #> 12       1       -2       1    0      0        1 #> 13       1       -2       2  NaN      0        0 #> 14       1       -2       3  NaN      0        0"},{"path":"https://mortonne.github.io/psifrr/reference/lag_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag rank — lag_rank","title":"Lag rank — lag_rank","text":"Calculate mean rank absolute input position lags adjacent recalls, relative possible absolute lags.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag rank — lag_rank","text":"","code":"lag_rank(   data,   lag_key = \"input\",   item_query = NULL,   test_key = NULL,   test = NULL )"},{"path":"https://mortonne.github.io/psifrr/reference/lag_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag rank — lag_rank","text":"data Merged study recall data. lag_key Name column use calculating lag recalled items. item_query Query string select items include pool possible recalls examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag rank — lag_rank","text":"Results subject rank columns. rank indicates strongly recalls clustered input position lag relative possible items recalled transition. rank 1 indicates lowest lag item always recalled. rank 0.5 indicates chance clustering. rank 0 indicates highest lag item always recalled.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/lag_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lag rank — lag_rank","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw, study_keys = list(\"category\")) head(lag_rank(data)) #>   subject      rank #> 1       1 0.6109533 #> 2       2 0.6356764 #> 3       3 0.6126071 #> 4       4 0.6670897 #> 5       5 0.6439234 #> 6       6 0.6484440"},{"path":"https://mortonne.github.io/psifrr/reference/merge_free_recall.html","id":null,"dir":"Reference","previous_headings":"","what":"Score standard free recall data — merge_free_recall","title":"Score standard free recall data — merge_free_recall","text":"Merge study recall events subject, list, item.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_free_recall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score standard free recall data — merge_free_recall","text":"","code":"merge_free_recall(   data,   merge_keys = NULL,   list_keys = NULL,   study_keys = NULL,   recall_keys = NULL,   position_key = \"position\" )"},{"path":"https://mortonne.github.io/psifrr/reference/merge_free_recall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score standard free recall data — merge_free_recall","text":"data Free recall data Psifr format. Must subject, list, trial_type, position, item columns. merge_keys Columns use designate events merge. Default list(‘subject’, ‘list’, ‘item’), merge events related item, within list. list_keys Columns apply study recall events. study_keys Columns apply study events. recall_keys Columns apply recall events. position_key Column indicating position item either study list recall sequence.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_free_recall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score standard free recall data — merge_free_recall","text":"Merged information study recall events. row corresponds one unique input/output pair.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_free_recall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score standard free recall data — merge_free_recall","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw)"},{"path":"https://mortonne.github.io/psifrr/reference/merge_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Score separate study and recall events — merge_lists","title":"Score separate study and recall events — merge_lists","text":"Merge separated study recall events subject, list, item.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score separate study and recall events — merge_lists","text":"","code":"merge_lists(   study,   recall,   merge_keys = NULL,   list_keys = NULL,   study_keys = NULL,   recall_keys = NULL,   position_key = \"position\" )"},{"path":"https://mortonne.github.io/psifrr/reference/merge_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score separate study and recall events — merge_lists","text":"study Information study events. one row study event. recall Information recall events. one row recall attempt. merge_keys Columns use designate events merge. Default list(‘subject’, ‘list’, ‘item’), merge events related item, within list. list_keys Columns apply study recall events. study_keys Columns apply study events. recall_keys Columns apply recall events. position_key Column indicating position item either study list recall sequence.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score separate study and recall events — merge_lists","text":"Merged information study recall events. row corresponds one unique input/output pair.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/merge_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score separate study and recall events — merge_lists","text":"","code":"study <- data.frame(   subject = c(1, 1), list = c(1, 1), position = c(1, 2), item = c(\"a\", \"b\") ) recall <- data.frame(subject = 1, list = 1, position = 1, item = \"b\") merge_lists(study, recall) #>   subject list item input output study recall repeat intrusion #> 1       1    1    a     1    NaN  TRUE  FALSE      0     FALSE #> 2       1    1    b     2      1  TRUE   TRUE      0     FALSE"},{"path":"https://mortonne.github.io/psifrr/reference/pli_list_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"List lag of prior-list intrusions — pli_list_lag","title":"List lag of prior-list intrusions — pli_list_lag","text":"intrusions items previous lists, lag indicating many lists back item presented.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pli_list_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List lag of prior-list intrusions — pli_list_lag","text":"","code":"pli_list_lag(data, max_lag)"},{"path":"https://mortonne.github.io/psifrr/reference/pli_list_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List lag of prior-list intrusions — pli_list_lag","text":"data Merged study recall data. Lists must numbered starting 1 lists must included. max_lag Maximum list lag consider. intial max_lag lists subject excluded considered lags possible included lists.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pli_list_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List lag of prior-list intrusions — pli_list_lag","text":"Results subject, list_lag, count, per_list, prob columns. Count indicates number intrusions list lag, per_list indicates number intrusions per list. prob column indicates probability within subject given included prior-list intrusion occurring lag.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pli_list_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List lag of prior-list intrusions — pli_list_lag","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) stats <- pli_list_lag(data, max_lag = 3) head(stats) #>   subject list_lag count   per_list       prob #> 1       1        1     7 0.15555556 0.25925926 #> 2       1        2     5 0.11111111 0.18518519 #> 3       1        3     0 0.00000000 0.00000000 #> 4       2        1     9 0.20000000 0.19148936 #> 5       2        2     2 0.04444444 0.04255319 #> 6       2        3     1 0.02222222 0.02127660"},{"path":"https://mortonne.github.io/psifrr/reference/pnr.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of Nth recall — pnr","title":"Probability of Nth recall — pnr","text":"Probability recall serial position output position.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pnr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of Nth recall — pnr","text":"","code":"pnr(data, item_query = NULL, test_key = NULL, test = NULL)"},{"path":"https://mortonne.github.io/psifrr/reference/pnr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of Nth recall — pnr","text":"data Merged study recall data. List length assumed lists within subject. item_query Query string select items include pool possible recalls e examined. test_key Name column labels use testing transitions inclusion. test Function takes previous current item values returns TRUE transitions included.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pnr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of Nth recall — pnr","text":"Results subject, output, input, prob, actual, possible columns. prob column output x input y indicates probability recalling input position y output position x. actual possible columns give raw tallies many times event actually occurred many times possible given recall sequence.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pnr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability of Nth recall — pnr","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) recall <- pnr(data) head(recall) #>   subject output input       prob actual possible #> 1       1      1     1 0.00000000      0       48 #> 2       1      1     2 0.02083333      1       48 #> 3       1      1     3 0.00000000      0       48 #> 4       1      1     4 0.00000000      0       48 #> 5       1      1     5 0.00000000      0       48 #> 6       1      1     6 0.00000000      0       48"},{"path":"https://mortonne.github.io/psifrr/reference/pool_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pool index — pool_index","title":"Create pool index — pool_index","text":"Look indices multiple items dataset larger pool.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pool_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pool index — pool_index","text":"","code":"pool_index(trial_items, pool_items_list)"},{"path":"https://mortonne.github.io/psifrr/reference/pool_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pool index — pool_index","text":"trial_items item presented trial. pool_items_list List items full pool.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pool_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pool index — pool_index","text":"Index item pool. Trials items pool NA. zero-indexed work Python functions.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/pool_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pool index — pool_index","text":"","code":"trial_items <- list(\"b\", \"a\", \"z\", \"c\", \"d\") pool_items_list <- list(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\") pool_index(trial_items, pool_items_list) #> [1]  1  0 NA  2  3"},{"path":"https://mortonne.github.io/psifrr/reference/reset_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset list index — reset_list","title":"Reset list index — reset_list","text":"Reset list numbering sequential starting one.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/reset_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset list index — reset_list","text":"","code":"reset_list(data)"},{"path":"https://mortonne.github.io/psifrr/reference/reset_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset list index — reset_list","text":"data Raw merged data. Must subject list fields.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/reset_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset list index — reset_list","text":"Data renumbered list field, starting 1.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/reset_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset list index — reset_list","text":"","code":"# Data where the list number does not start at 1 subjects_list <- list(1, 1) study_lists <- list(list(\"a\", \"b\"), list(\"c\", \"d\")) recall_lists <- list(list(\"b\"), list(\"c\", \"d\")) list_nos <- list(3, 4) raw <- table_from_lists(   subjects_list, study_lists, recall_lists,   lists = list_nos ) raw #>   subject list trial_type position item #> 1       1    3      study        1    a #> 2       1    3      study        2    b #> 3       1    3     recall        1    b #> 4       1    4      study        1    c #> 5       1    4      study        2    d #> 6       1    4     recall        1    c #> 7       1    4     recall        2    d  # Reset the list number reset_list(raw) #>   subject list trial_type position item #> 1       1    1      study        1    a #> 2       1    1      study        2    b #> 3       1    1     recall        1    b #> 4       1    2      study        1    c #> 5       1    2      study        2    d #> 6       1    2     recall        1    c #> 7       1    2     recall        2    d"},{"path":"https://mortonne.github.io/psifrr/reference/sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a sample dataset — sample_data","title":"Load a sample dataset — sample_data","text":"Load one included sample datasets.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a sample dataset — sample_data","text":"","code":"sample_data(study)"},{"path":"https://mortonne.github.io/psifrr/reference/sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a sample dataset — sample_data","text":"study Study load (options: \"Morton2013\").","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a sample dataset — sample_data","text":"data.frame data specified study.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a sample dataset — sample_data","text":"","code":"data <- sample_data(\"Morton2013\") head(data) #>   subject list position trial_type       item item_number session list_type #> 1       1    1        1      study      TOWEL         743       1      pure #> 2       1    1        2      study      LADLE         631       1      pure #> 3       1    1        3      study    THERMOS         735       1      pure #> 4       1    1        4      study       LEGO         637       1      pure #> 5       1    1        5      study   BACKPACK         521       1      pure #> 6       1    1        6      study JACKHAMMER         621       1      pure #>   category response response_time list_category #> 1      obj        3         1.517           obj #> 2      obj        3         1.404           obj #> 3      obj        3         0.911           obj #> 4      obj        3         0.883           obj #> 5      obj        3         0.819           obj #> 6      obj        1         1.212           obj"},{"path":"https://mortonne.github.io/psifrr/reference/sample_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Load sample distances — sample_distances","title":"Load sample distances — sample_distances","text":"Load semantic distances pairs items.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load sample distances — sample_distances","text":"","code":"sample_distances(study)"},{"path":"https://mortonne.github.io/psifrr/reference/sample_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load sample distances — sample_distances","text":"study Study load distances (options: \"Morton2013\").","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load sample distances — sample_distances","text":"matrix item-item distances specified study.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/sample_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load sample distances — sample_distances","text":"","code":"d <- sample_distances(\"Morton2013\") items <- d$items distances <- d$distances"},{"path":"https://mortonne.github.io/psifrr/reference/spc.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial position curve — spc","title":"Serial position curve — spc","text":"Recall probability function serial position list.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/spc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial position curve — spc","text":"","code":"spc(data)"},{"path":"https://mortonne.github.io/psifrr/reference/spc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serial position curve — spc","text":"data Merged study recall data.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/spc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serial position curve — spc","text":"Results subject, input, recall columns.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/spc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial position curve — spc","text":"","code":"raw <- sample_data(\"Morton2013\") data <- merge_free_recall(raw) recall <- spc(data) head(recall) #>   subject input    recall #> 1       1     1 0.5416667 #> 2       1     2 0.4583333 #> 3       1     3 0.6250000 #> 4       1     4 0.3333333 #> 5       1     5 0.4375000 #> 6       1     6 0.4791667"},{"path":"https://mortonne.github.io/psifrr/reference/split_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to split format — split_lists","title":"Convert data to split format — split_lists","text":"Convert study, recall, events list format.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/split_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to split format — split_lists","text":"","code":"split_lists(data, phase, keys = NULL, names = NULL, item_query = NULL)"},{"path":"https://mortonne.github.io/psifrr/reference/split_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to split format — split_lists","text":"data Free recall data raw merged format. phase Phase free recall ('study' 'recall') split. ‘raw’, trials included. keys Data columns include split data. specified, columns included. names Name column returned split data. Default use names input columns. item_query Query string select study trials include.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/split_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data to split format — split_lists","text":"Data split format. included column key named list.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/split_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data to split format — split_lists","text":"","code":"# Create raw and merged data list_subject <- list(1, 1) study <- list(list(\"absence\", \"hollow\"), list(\"fountain\", \"piano\")) recall <- list(list(\"absence\"), list(\"piano\", \"fountain\")) raw <- table_from_lists(list_subject, study, recall) data <- merge_free_recall(raw)  # Get study events split by list, just including the list and item fields. split_lists(data, \"study\", keys = list(\"list\", \"item\")) #> $list #> $list[[1]] #> [1] 1 1 #>  #> $list[[2]] #> [1] 2 2 #>  #>  #> $item #> $item[[1]] #> [1] \"absence\" \"hollow\"  #>  #> $item[[2]] #> [1] \"fountain\" \"piano\"    #>  #>   # Export recall events, split by list. split_lists(data, \"recall\", keys = list(\"item\")) #> $item #> $item[[1]] #> [1] \"absence\" #>  #> $item[[2]] #> [1] \"piano\"    \"fountain\" #>  #>   # Raw events (i.e., events that haven’t been scored) can also be exported to # list format. split_lists(raw, \"raw\", keys = list(\"position\")) #> $position #> $position[[1]] #> [1] 1 2 1 #>  #> $position[[2]] #> [1] 1 2 1 2 #>  #>"},{"path":"https://mortonne.github.io/psifrr/reference/table_from_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create table format data from lists — table_from_lists","title":"Create table format data from lists — table_from_lists","text":"Convert study recall lists table format.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/table_from_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create table format data from lists — table_from_lists","text":"","code":"table_from_lists(subjects, study, recall, lists = NULL, ...)"},{"path":"https://mortonne.github.io/psifrr/reference/table_from_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create table format data from lists — table_from_lists","text":"subjects Subject identifier list. study List items study list. recall List recalled items study list. lists List list numbers. specified, lists subject numbered sequentially starting one. ... Additional arguments specify additional columns. must list first item indicates study list values second item indicates recall list values. either item NULL, column undefined phase.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/table_from_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create table format data from lists — table_from_lists","text":"Data table format.","code":""},{"path":"https://mortonne.github.io/psifrr/reference/table_from_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create table format data from lists — table_from_lists","text":"","code":"# Create standard columns from list data. subjects_list <- list(1, 1, 2, 2) study_lists <- list(   list(\"a\", \"b\"), list(\"c\", \"d\"), list(\"e\", \"f\"), list(\"g\", \"h\") ) recall_lists <- list(list(\"b\"), list(\"d\", \"c\"), list(\"f\", \"e\"), list()) table_from_lists(subjects_list, study_lists, recall_lists) #>    subject list trial_type position item #> 1        1    1      study        1    a #> 2        1    1      study        2    b #> 3        1    1     recall        1    b #> 4        1    2      study        1    c #> 5        1    2      study        2    d #> 6        1    2     recall        1    d #> 7        1    2     recall        2    c #> 8        2    1      study        1    e #> 9        2    1      study        2    f #> 10       2    1     recall        1    f #> 11       2    1     recall        2    e #> 12       2    2      study        1    g #> 13       2    2      study        2    h  # Include non-standard columns named col1 and col2. subjects_list <- list(1, 1) study_lists <- list(list(\"a\", \"b\"), list(\"c\", \"d\")) recall_lists <- list(list(\"b\"), list(\"d\", \"c\")) col1 <- list(list(list(1, 2), list(1, 2)), list(list(2), list(2, 1))) col2 <- list(list(list(1, 1), list(2, 2)), NULL) table_from_lists(   subjects_list, study_lists, recall_lists,   col1 = col1, col2 = col2 ) #>   subject list trial_type position item col1 col2 #> 1       1    1      study        1    a    1    1 #> 2       1    1      study        2    b    2    1 #> 3       1    1     recall        1    b    2  NaN #> 4       1    2      study        1    c    1    2 #> 5       1    2      study        2    d    2    2 #> 6       1    2     recall        1    d    2  NaN #> 7       1    2     recall        2    c    1  NaN"},{"path":"https://mortonne.github.io/psifrr/news/index.html","id":"psifrr-030","dir":"Changelog","previous_headings":"","what":"psifrr 0.3.0","title":"psifrr 0.3.0","text":"Support calculating bootstrap confidence intervals added. documentation now contains examples plotting curves confidence bands splitting analyses condition.","code":""},{"path":"https://mortonne.github.io/psifrr/news/index.html","id":"psifrr-020","dir":"Changelog","previous_headings":"","what":"psifrr 0.2.0","title":"psifrr 0.2.0","text":"non-plotting functions Psifr now R interfaces, documentation, examples. Documentation expanations analyses added psifrr website. function reference page also added website. Citation information added website README file. Installation streamlined using reticulate configuration. Operation psifrr package currently still depends reticulate branch Psifr Github. future release Psifr allow psifrr-compliant version installed PyPI.","code":""}]
